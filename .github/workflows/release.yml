name: release
# on: pull_request
on:
  push:
    tags:
      - '*'

env:
  DEVELOPER_DIR: /Applications/Xcode_15.4.app/Contents/Developer
  IOS_DEPLOYMENT_TARGET: '13.0'
  MAC_DEPLOYMENT_TARGET: '11.0'
  MAC_CATALYST_DEPLOYMENT_TARGET: '13.1'
  WATCHOS_DEPLOYMENT_TARGET: '6.0'
  TVOS_DEPLOYMENT_TARGET: '11.0'
  VISIONOS_DEPLOYMENT_TARGET: '1.0'
  ENABLE_BITCODE: OFF
  ENABLE_ARC: OFF
  ENABLE_VISIBILITY: OFF
  EMSCRIPTEN_VERSION: 3.1.28

permissions:
  contents: read

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.get_version.outputs.VERSION }}
    steps:
    - uses: actions/checkout@v4
    - name: get-version
      id: get_version
      run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT
    - name: opencv2-source
      env:
        opencv-version: 2.4.13.7
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.opencv-version }}.zip -O opencv-${{ env.opencv-version }}.zip
        unzip -q opencv-${{ env.opencv-version }}.zip
        rm opencv-${{ env.opencv-version }}.zip
        cd opencv-${{ env.opencv-version }}
        truncate -s 0 cmake/OpenCVFindLibsGrfmt.cmake

        rm modules/core/src/gl_*
        rm modules/core/src/gpumat.cpp
        rm modules/core/src/opengl_*
        rm modules/core/include/opencv2/core/cuda_*
        rm modules/core/include/opencv2/core/devmem2d.hpp
        rm modules/core/include/opencv2/core/gpumat.hpp
        rm modules/core/include/opencv2/core/opengl_*
        rm modules/core/include/opencv2/core/wimage.hpp

        rm -rf modules/dynamicuda
        rm -rf modules/gpu
        rm -rf modules/ocl

        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-no-gpu.patch

        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-no-rtti.patch
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-no-zlib.patch
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-fix-highgui-include.patch
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-no-link-stdc++.patch
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-enable-cxx11.patch
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-link-openmp.patch
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-newer-msvc.patch
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-fix-windows-arm-arch.patch
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-minimal-install.patch
        cp ../patches/draw_text.h ../patches/mono_font_data.h modules/core/src/
        patch -p1 -i ../patches/opencv-${{ env.opencv-version }}-drawing-mono-font.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
        rm -rf 3rdparty apps data doc samples platforms
        rm -rf modules/java
        rm -rf modules/python
        rm -rf modules/ts
        sed -e 's/__VERSION__/${{ env.opencv-version }}/g' ../patches/Info.plist > ./Info.plist
        cp ../opencv2_cmake_options.txt ./options.txt
        cd ..
        mv opencv-${{ env.opencv-version }} opencv-mobile-${{ env.opencv-version }}
        zip -9 -r opencv-mobile-${{ env.opencv-version }}.zip opencv-mobile-${{ env.opencv-version }}
    - name: upload-opencv2-source
      uses: actions/upload-artifact@v4
      with:
        name: opencv-mobile-2.4.13.7-source
        path: opencv-mobile-2.4.13.7.zip

  ios:
    needs: [setup]
    runs-on: macos-14
    strategy:
      matrix:
        opencv-version: [2.4.13.7]
    env:
      COMMON_CMAKE_OPTIONS: |
        -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake \
        -DPLATFORM=OS \
        -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET \
        -DENABLE_BITCODE=$ENABLE_BITCODE \
        -DENABLE_ARC=$ENABLE_ARC \
        -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
        -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" \
        -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
        -DCMAKE_INSTALL_PREFIX=install \
        -DCMAKE_BUILD_TYPE=Release \
    steps:
    - uses: actions/checkout@v4
    - uses: actions/download-artifact@v4
      with:
        name: opencv-mobile-${{ matrix.opencv-version }}-source
    - name: setup-opencv-source
      run: |
        unzip -q opencv-mobile-${{ matrix.opencv-version }}.zip
        echo "SOURCE_DIR=opencv-mobile-${{ matrix.opencv-version }}" >> $GITHUB_ENV
        echo "PACKAGE_NAME=opencv-mobile-${{ matrix.opencv-version }}-ios" >> $GITHUB_ENV
    - name: workaround-opencv2-list
      if: matrix.opencv-version == '2.4.13.7'
      run: |
        # workaround ar @list issue on macos
        sed -i -e 's!\\"${objpath4}\\"!${objpath4}!g' ${{ env.SOURCE_DIR }}/modules/world/CMakeLists.txt
    - name: build-arm64
      run: |
        cd ${{ env.SOURCE_DIR }}
        mkdir build-arm64 && cd build-arm64
        cmake ${{ env.COMMON_CMAKE_OPTIONS }} -DARCHS="arm64" \
            `cat ../options.txt` -DBUILD_opencv_world=ON -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON ..
        # workaround ar @list issue on macos
        cmake --build . -j 4 || { cd modules/world; $DEVELOPER_DIR/Toolchains/XcodeDefault.xctoolchain/usr/bin/ar qc ../../lib/libopencv_world.a `cat world_objects.rsp` CMakeFiles/opencv_world.dir/src/world_init.cpp.o; cd ../..; }
        cmake --build . --target install
    - name: package
      run: |
        rm -rf opencv2.framework
        mkdir -p opencv2.framework/Headers
        lipo -create \
            ${{ env.SOURCE_DIR }}/build-arm64/install/lib/libopencv_world.a \
            -o opencv2.framework/opencv2
        cp -r ${{ env.SOURCE_DIR }}/build-arm64/install/include/opencv4/opencv2/* opencv2.framework/Headers/ || :
        cp -r ${{ env.SOURCE_DIR }}/build-arm64/install/include/opencv2/* opencv2.framework/Headers/ || :
        cp ${{ env.SOURCE_DIR }}/Info.plist opencv2.framework/
        rm -f ${{ env.PACKAGE_NAME }}.zip
        zip -9 -y -r ${{ env.PACKAGE_NAME }}.zip opencv2.framework
    - name: test
      run: |
        cd test
        mkdir build && cd build
        cmake ${{ env.COMMON_CMAKE_OPTIONS }} -DARCHS="arm64" \
            -DOpenCV_DIR=$GITHUB_WORKSPACE ..
        cmake --build . -j 4
    - name: upload-zip
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PACKAGE_NAME }}
        path: ${{ env.PACKAGE_NAME }}.zip

  ios-simulator:
    needs: [setup]
    runs-on: macos-14
    strategy:
      matrix:
        opencv-version: [2.4.13.7]
    env:
      COMMON_CMAKE_OPTIONS: |
        -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake \
        -DPLATFORM=SIMULATOR \
        -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET \
        -DENABLE_BITCODE=$ENABLE_BITCODE \
        -DENABLE_ARC=$ENABLE_ARC \
        -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
        -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" \
        -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
        -DCMAKE_INSTALL_PREFIX=install \
        -DCMAKE_BUILD_TYPE=Release \
    steps:
    - uses: actions/checkout@v4
    - uses: actions/download-artifact@v4
      with:
        name: opencv-mobile-${{ matrix.opencv-version }}-source
    - name: setup-opencv-source
      run: |
        unzip -q opencv-mobile-${{ matrix.opencv-version }}.zip
        echo "SOURCE_DIR=opencv-mobile-${{ matrix.opencv-version }}" >> $GITHUB_ENV
        echo "PACKAGE_NAME=opencv-mobile-${{ matrix.opencv-version }}-ios-simulator" >> $GITHUB_ENV
    - name: workaround-opencv2-list
      if: matrix.opencv-version == '2.4.13.7'
      run: |
        # workaround ar @list issue on macos
        sed -i -e 's!\\"${objpath4}\\"!${objpath4}!g' ${{ env.SOURCE_DIR }}/modules/world/CMakeLists.txt
    - name: build-x86_64
      run: |
        cd ${{ env.SOURCE_DIR }}
        mkdir build-x86_64 && cd build-x86_64
        cmake ${{ env.COMMON_CMAKE_OPTIONS }} -DARCHS="x86_64" \
            `cat ../options.txt` -DBUILD_opencv_world=ON -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON ..
        # workaround ar @list issue on macos
        cmake --build . -j 4 || { cd modules/world; $DEVELOPER_DIR/Toolchains/XcodeDefault.xctoolchain/usr/bin/ar qc ../../lib/libopencv_world.a `cat world_objects.rsp` CMakeFiles/opencv_world.dir/src/world_init.cpp.o; cd ../..; }
        cmake --build . --target install
    - name: build-arm64
      run: |
        cd ${{ env.SOURCE_DIR }}
        mkdir build-arm64 && cd build-arm64
        cmake ${{ env.COMMON_CMAKE_OPTIONS }} -DARCHS="arm64" \
            `cat ../options.txt` -DBUILD_opencv_world=ON -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON ..
        # workaround ar @list issue on macos
        cmake --build . -j 4 || { cd modules/world; $DEVELOPER_DIR/Toolchains/XcodeDefault.xctoolchain/usr/bin/ar qc ../../lib/libopencv_world.a `cat world_objects.rsp` CMakeFiles/opencv_world.dir/src/world_init.cpp.o; cd ../..; }
        cmake --build . --target install
    - name: package
      run: |
        rm -rf opencv2.framework
        mkdir -p opencv2.framework/Headers
        lipo -create \
            ${{ env.SOURCE_DIR }}/build-x86_64/install/lib/libopencv_world.a \
            ${{ env.SOURCE_DIR }}/build-arm64/install/lib/libopencv_world.a \
            -o opencv2.framework/opencv2
        cp -r ${{ env.SOURCE_DIR }}/build-x86_64/install/include/opencv4/opencv2/* opencv2.framework/Headers/ || :
        cp -r ${{ env.SOURCE_DIR }}/build-x86_64/install/include/opencv2/* opencv2.framework/Headers/ || :
        cp ${{ env.SOURCE_DIR }}/Info.plist opencv2.framework/
        rm -f ${{ env.PACKAGE_NAME }}.zip
        zip -9 -y -r ${{ env.PACKAGE_NAME }}.zip opencv2.framework
    - name: test
      run: |
        cd test
        mkdir build && cd build
        cmake ${{ env.COMMON_CMAKE_OPTIONS }} -DARCHS="x86_64;arm64" \
            -DOpenCV_DIR=$GITHUB_WORKSPACE ..
        cmake --build . -j 4
    - name: upload-zip
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PACKAGE_NAME }}
        path: ${{ env.PACKAGE_NAME }}.zip

  ios-xcframework:
    needs: [ios, ios-simulator]
    runs-on: macos-14
    strategy:
      matrix:
        opencv-version: [2.4.13.7]
    steps:
    - run: sudo xcode-select --switch /Applications/Xcode_15.4.app
    - uses: actions/checkout@v4
    - name: setup-opencv-package
      run: |
        echo "IOS_PACKAGE_NAME=opencv-mobile-${{ matrix.opencv-version }}-ios" >> $GITHUB_ENV
        echo "IOS_SIMULATOR_PACKAGE_NAME=opencv-mobile-${{ matrix.opencv-version }}-ios-simulator" >> $GITHUB_ENV
        echo "PACKAGE_NAME=opencv-mobile-${{ matrix.opencv-version }}-ios-xcframework" >> $GITHUB_ENV
    - name: download-ios-package
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.IOS_PACKAGE_NAME }}
    - name: download-ios-simulator-package
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.IOS_SIMULATOR_PACKAGE_NAME }}
    - name: create-xcframwork
      run: |
        mkdir -p ${{ env.IOS_PACKAGE_NAME }}
        mkdir -p ${{ env.IOS_SIMULATOR_PACKAGE_NAME }}
        unzip -q ${{ env.IOS_PACKAGE_NAME }}.zip -d ${{ env.IOS_PACKAGE_NAME }}
        unzip -q ${{ env.IOS_SIMULATOR_PACKAGE_NAME }}.zip -d ${{ env.IOS_SIMULATOR_PACKAGE_NAME }}
        xcodebuild -create-xcframework \
            -framework ${{ env.IOS_PACKAGE_NAME }}/opencv2.framework \
            -framework ${{ env.IOS_SIMULATOR_PACKAGE_NAME }}/opencv2.framework \
            -output opencv2.xcframework
        rm -f ${{ env.PACKAGE_NAME }}.zip
        zip -9 -y -r ${{ env.PACKAGE_NAME }}.zip opencv2.xcframework
    - name: upload-zip
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PACKAGE_NAME }}
        path: ${{ env.PACKAGE_NAME }}.zip

  release:
    permissions:
      contents: write  # for softprops/action-gh-release to create a release
    needs: [setup, ios, ios-simulator, ios-xcframework]
    runs-on: ubuntu-latest
    steps:
    - name: download
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: create-release
      uses: softprops/action-gh-release@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag_name: ${{ needs.setup.outputs.VERSION }}
        name: Release ${{ needs.setup.outputs.VERSION }}
        files: artifacts/*/*.zip
